<!--

This file is part of the yaosp build system

Copyright (c) 2008, 2009 Zoltan Kovacs
Copyright (c) 2009 Kornel Csernai

This program is free software; you can redistribute it and/or modify
it under the terms of version 2 of the GNU General Public License
as published by the Free Software Foundation.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License along
with this program; if not, write to the Free Software Foundation, Inc.,
51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

-->

<build default="all">
    <array name="arch_files_asm">
        <item>arch/i386/src/boot.S</item>
        <item>arch/i386/src/atomic.S</item>
        <item>arch/i386/src/i386.S</item>
        <item>arch/i386/src/isr.S</item>
        <item>arch/i386/src/switch.S</item>
        <item>arch/i386/src/smp_entry.S</item>
        <item>arch/i386/src/network/network.S</item>
        <item>arch/i386/src/lib/string.S</item>
    </array>

    <array name="arch_files_c">
        <item>arch/i386/src/start.c</item>
        <item>arch/i386/src/screen.c</item>
        <item>arch/i386/src/spinlock.c</item>
        <item>arch/i386/src/gdt.c</item>
        <item>arch/i386/src/cpu.c</item>
        <item>arch/i386/src/interrupt.c</item>
        <item>arch/i386/src/exception.c</item>
        <item>arch/i386/src/debugger.c</item>
        <item>arch/i386/src/thread.c</item>
        <item>arch/i386/src/pit.c</item>
        <item>arch/i386/src/scheduler.c</item>
        <item>arch/i386/src/apic.c</item>
        <item>arch/i386/src/elf32.c</item>
        <item>arch/i386/src/elf32_module.c</item>
        <item>arch/i386/src/elf32_application.c</item>
        <item>arch/i386/src/syscall.c</item>
        <item>arch/i386/src/fork.c</item>
        <item>arch/i386/src/hwtime.c</item>
        <item>arch/i386/src/fpu.c</item>
        <item>arch/i386/src/mp.c</item>
        <item>arch/i386/src/smp.c</item>
        <item>arch/i386/src/bios.c</item>
        <item>arch/i386/src/mm/pagefault.c</item>
        <item>arch/i386/src/mm/paging.c</item>
        <item>arch/i386/src/mm/context.c</item>
        <item>arch/i386/src/mm/region.c</item>
    </array>

    <array name="arch_files_x86emu">
        <item>arch/i386/src/x86emu/debug.c</item>
        <item>arch/i386/src/x86emu/decode.c</item>
        <item>arch/i386/src/x86emu/fpu.c</item>
        <item>arch/i386/src/x86emu/ops.c</item>
        <item>arch/i386/src/x86emu/ops2.c</item>
        <item>arch/i386/src/x86emu/prim_ops.c</item>
        <item>arch/i386/src/x86emu/sys.c</item>
    </array>

    <array name="files">
        <item>src/console.c</item>
        <item>src/kernel.c</item>
        <item>src/process.c</item>
        <item>src/thread.c</item>
        <item>src/scheduler.c</item>
        <item>src/irq.c</item>
        <item>src/smp.c</item>
        <item>src/init.c</item>
        <item>src/bootmodule.c</item>
        <item>src/module.c</item>
        <item>src/symbols.c</item>
        <item>src/waitqueue.c</item>
        <item>src/semaphore.c</item>
        <item>src/devices.c</item>
        <item>src/syscall.c</item>
        <item>src/fork.c</item>
        <item>src/loader.c</item>
        <item>src/time.c</item>
        <item>src/version.c</item>
        <item>src/interpreter.c</item>
        <item>src/mm/pages.c</item>
        <item>src/mm/kmalloc.c</item>
        <item>src/mm/context.c</item>
        <item>src/mm/region.c</item>
        <item>src/mm/sbrk.c</item>
        <item>src/vfs/vfs.c</item>
        <item>src/vfs/rootfs.c</item>
        <item>src/vfs/devfs.c</item>
        <item>src/vfs/inode.c</item>
        <item>src/vfs/io_context.c</item>
        <item>src/vfs/filesystem.c</item>
        <item>src/network/interface.c</item>
        <item>src/network/packet.c</item>
        <item>src/network/arp.c</item>
        <item>src/network/ipv4.c</item>
        <item>src/network/icmp.c</item>
        <item>src/network/route.c</item>
        <item>src/network/socket.c</item>
        <item>src/network/tcp.c</item>
    </array>

    <array name="files_lib">
        <item>src/lib/string.c</item>
        <item>src/lib/printf.c</item>
        <item>src/lib/hashtable.c</item>
        <item>src/lib/udivmoddi4.c</item>
        <item>src/lib/snprintf.c</item>
        <item>src/lib/time.c</item>
        <item>src/lib/ctype.c</item>
        <item>src/lib/circular.c</item>
    </array>

    <target name="clean">
        <delete>objs/x86emu/*</delete>
        <rmdir>objs/x86emu</rmdir>
        <delete>objs/arch/*</delete>
        <rmdir>objs/arch</rmdir>
        <delete>objs/lib/*</delete>
        <rmdir>objs/lib</rmdir>
        <delete>objs/*</delete>
        <rmdir>objs</rmdir>
        <delete>include/arch</delete>
    </target>

    <target name="prepare" type="private">
        <mkdir>objs</mkdir>
        <mkdir>objs/lib</mkdir>
        <mkdir>objs/arch</mkdir>
        <mkdir>objs/x86emu</mkdir>
        <symlink from="../arch/i386/include" to="include/arch"/>
    </target>

    <target name="compile">
        <call target="prepare"/>

        <echo>Generating system call table</echo>
        <echo/>

        <exec executable="python">
            <arg>../../scripts/syscall_table_generator/syscall_table_generator.py</arg>
            <arg>src/syscall.c</arg>
            <arg>include/syscall_table.h</arg>
        </exec>

        <echo>Compiling architecture specific assembly files</echo>
        <echo/>

        <for var="i" array="${arch_files_asm}">
            <echo>[GCC    ] source/kernel/${i}</echo>
            <gcc>
                <input>${i}</input>
                <output>objs/arch/filename(${i}).o</output>
                <include>./include</include>
                <define key="__ASSEMBLER__"/>
                <flag>-c</flag>
                <flag>-m32</flag>
                <flag>-Wall</flag>
                <flag>-Werror</flag>
                <flag>-nostdinc</flag>
                <flag>-nostdlib</flag>
                <flag>-ffreestanding</flag>
            </gcc>
        </for>

        <echo/>
        <echo>Compiling architecture specific C files</echo>
        <echo/>

        <for var="i" array="${arch_files_c}">
            <echo>[GCC    ] source/kernel/${i}</echo>
            <gcc>
                <input>${i}</input>
                <output>objs/arch/filename(${i}).o</output>
                <include>./include</include>
                <flag>-c</flag>
                <flag>-O2</flag>
                <flag>-m32</flag>
                <flag>-Wall</flag>
                <flag>-Werror</flag>
                <flag>-Wshadow</flag>
                <flag>-nostdinc</flag>
                <flag>-nostdlib</flag>
                <flag>-ffreestanding</flag>
                <flag>-fno-strict-aliasing</flag>
            </gcc>
        </for>

        <for var="i" array="${arch_files_x86emu}">
            <echo>[GCC    ] source/kernel/${i}</echo>
            <gcc>
                <input>${i}</input>
                <output>objs/x86emu/filename(${i}).o</output>
                <include>./include</include>
                <flag>-c</flag>
                <flag>-O2</flag>
                <flag>-m32</flag>
                <flag>-Wall</flag>
                <flag>-Werror</flag>
                <flag>-nostdinc</flag>
                <flag>-nostdlib</flag>
                <flag>-ffreestanding</flag>
                <flag>-fno-strict-aliasing</flag>
            </gcc>
        </for>
        
        <echo/>
        <echo>Compiling architecture independent files</echo>
        <echo/>

        <for var="i" array="${files}">
            <echo>[GCC    ] source/kernel/${i}</echo>
            <gcc>
                <input>${i}</input>
                <output>objs/filename(${i}).o</output>
                <include>./include</include>
                <flag>-c</flag>
                <flag>-O2</flag>
                <flag>-m32</flag>
                <flag>-Wall</flag>
                <flag>-Werror</flag>
                <flag>-Wshadow</flag>
                <flag>-nostdinc</flag>
                <flag>-nostdlib</flag>
                <flag>-ffreestanding</flag>
                <flag>-fno-strict-aliasing</flag>
            </gcc>
        </for>

        <for var="i" array="${files_lib}">
            <echo>[GCC    ] source/kernel/${i}</echo>
            <gcc>
                <input>${i}</input>
                <output>objs/lib/filename(${i}).o</output>
                <include>./include</include>
                <flag>-c</flag>
                <flag>-O2</flag>
                <flag>-m32</flag>
                <flag>-Wall</flag>
                <flag>-Werror</flag>
                <flag>-Wshadow</flag>
                <flag>-nostdinc</flag>
                <flag>-nostdlib</flag>
                <flag>-ffreestanding</flag>
            </gcc>
        </for>

        <echo></echo>
        <echo>Linking kernel binary</echo>
        <echo></echo>
        <echo>[LD    ] source/kernel/objs/kernel</echo>

        <ld>
            <input>objs/*.o</input>
            <input>objs/lib/*.o</input>
            <input>objs/arch/*.o</input>
            <input>objs/x86emu/*.o</input>
            <output>objs/kernel</output>
            <linkerscript>arch/i386/linker.ld</linkerscript>
        </ld>
    </target>

    <target name="generate_syscall_table">

        <copy from="include/syscall_table.h" to="../include/yaosp/syscall_table.h"/>
    </target>

    <target name="install">
        <copy from="objs/kernel" to="../../build/image/system/kernel"/>
    </target>

    <target name="all">
        <call target="clean"/>
        <call target="compile"/>
        <call target="generate_syscall_table"/>
        <call target="install"/>
        <!--call target="test" directory="tst"/-->
    </target>
</build>
